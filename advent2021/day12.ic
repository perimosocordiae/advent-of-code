-- ::= import "core.ic"
io ::= import "io.ic"
str ::= import "string/split.ic"
vec ::= import "lib/intvec.ic"
file ::= import "file.ic"
util ::= import "lib/util.ic"
strip ::= import "string/strip.ic"
match ::= import "string/match.ic"
string ::= import "string.ic"

MAX_NUM_NODES ::= 12

CountUniquePaths ::= (
    node_ids: [](string.string),
    adj_matrix: *[MAX_NUM_NODES, MAX_NUM_NODES; bool]) -> i64 {
  num_nodes := node_ids.length as i64
  // Find the start and end node indices, and keep track of which nodes can
  // be revisited.
  start: i64
  end: i64
  can_revisit: [MAX_NUM_NODES; bool]
  for (0, num_nodes) do [i: i64] {
    if (match.Equals(node_ids[i]'view(), "start")) {
      start = i
    } else if (match.Equals(node_ids[i]'view(), "end")) {
      end = i
    } else {
      ch := @(node_ids[i]'at(0)) as i8
      can_revisit[i] = ch >= (!A as i8) and ch <= (!Z as i8)
    }
  }
  // Print the adjacency matrix
  for (0, num_nodes) do [i: i64] {
    for (0, num_nodes) do [j: i64] {
      if ((@adj_matrix)[i][j]) {
        io.Print(!X)
      } else {
        io.Print(!_)
      }
    }
    io.Print(!\n)
  }
  // Print the node ids
  for (0, num_nodes) do [i: i64] {
    io.Print(i, ": ", node_ids[i]'view())
    if (can_revisit[i]) {
      io.Print(" (big)\n")
    } else {
      io.Print(!\n)
    }
  }
  return 0
}


Solve ::= (filename: []char) -> () {
  buffer: [MAX_NUM_NODES; string.string]
  buf_len := 0
  adj_matrix: [MAX_NUM_NODES, MAX_NUM_NODES; bool]
  file.With(filename) open [f: file.File] {
    file.Lines(f) each [line: []char] {
      tmp := strip.StripSuffix(line, "\n")
      edge := [-1, -1]
      edge_idx := 0
      str.Split(tmp, !-) do [node: []char] {
        for (0, buf_len) do [idx: i64] {
          if (match.Equals(node, buffer[idx]'view())) {
            edge[edge_idx] = idx
            // break out of the loop here, ideally
          }
        }
        if (edge[edge_idx] == -1) {
          // new node, add it to the buffer
          buffer[buf_len] = string.make(node)
          edge[edge_idx] = buf_len
          buf_len += 1
        }
        edge_idx += 1
      }
      // add undirected edge to the adjacency matrix
      adj_matrix[edge[0]][edge[1]] = true
      adj_matrix[edge[1]][edge[0]] = true
    }
  }
  node_ids := slice(&buffer[0], buf_len as u64)
  io.Print("Part 1: ", CountUniquePaths(node_ids, &adj_matrix), !\n)
}

io.Print("Test 1:\n")
Solve("inputs/12.test1")

io.Print("Test 2:\n")
Solve("inputs/12.test2")

io.Print("Test 3:\n")
Solve("inputs/12.test3")

io.Print("Full:\n")
Solve("inputs/12.full")
