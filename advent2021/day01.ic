-- ::= import "core.ic"
io ::= import "io.ic"
vec ::= import "lib/intvec.ic"
file ::= import "file.ic"
util ::= import "lib/util.ic"

CountIncreases ::= (depths: []i64) -> i64 {
  num_increases := 0
  prev := depths[0]
  for (1, depths.length as i64) do [i: i64] {
    d := depths[i]
    if (d > prev) {
      num_increases += 1
    }
    prev = d
  }
  return num_increases
}

CountWindowIncreases ::= (depths: []i64, window_size: u64) -> i64 {
  length := depths.length - window_size + 1
  convolved := vec.make(0, length)
  for (0, length as i64) do [i: i64] {
    for (0, window_size as i64) do [j: i64] {
      @(convolved'ref(i)) += depths[i + j]
    }
  }
  return CountIncreases(convolved'as_slice())
}

Solve ::= (filename: []char) -> () {
  buffer: [2048; i64]
  idx: u64
  file.With(filename) open [f: file.File] {
    file.Lines(f) each [line: []char] {
      buffer[idx] = util.ParseInt64(line)
      idx += 1
    }
  }
  values := builtin.slice(&buffer[0], idx)
  io.Print("Part 1: ", CountIncreases(values), !'\n')
  io.Print("Part 2: ", CountWindowIncreases(values, 3), !'\n')
}

io.Print("Test:\n")
Solve("inputs/01.test")
io.Print("\nFull:\n")
Solve("inputs/01.full")
