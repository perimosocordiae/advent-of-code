-- ::= import "core.ic"
io ::= import "io.ic"
str ::= import "string/split.ic"
file ::= import "file.ic"
util ::= import "lib/util.ic"
ring_buffer ::= import "lib/ring_buffer.ic"

Solve ::= (filename: []char) -> () {
  counts := ring_buffer.make(0, 9)
  file.With(filename) open [f: file.File] {
    file.Lines(f) each [line: []char] {
      str.Split(line, !,) do [num_str: []char] {
        num := util.ParseInt64(num_str)
        @(counts'ref(num)) += 1
      }
    }
  }
  for (0, 80) do [day: i64] {
    new_fish := counts'pop()
    @(counts'ref(6)) += new_fish
  }
  io.Print("Part 1: ", counts'sum(), !\n)

  for (80, 256) do [day: i64] {
    new_fish := counts'pop()
    @(counts'ref(6)) += new_fish
  }
  io.Print("Part 2: ", counts'sum(), !\n)
}

io.Print("Test:\n")
Solve("inputs/06.test")

io.Print("Full:\n")
Solve("inputs/06.full")