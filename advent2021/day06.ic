-- ::= import "core.ic"
io ::= import "io.ic"
str ::= import "string/split.ic"
file ::= import "file.ic"
cstd ::= import "c/stdlib.ic"
intvec ::= import "lib/intvec.ic"

ParseInt64 ::= (s: []char) -> i64 {
  return cstd.atol(s.data)
}

Solve ::= (filename: []char) -> () {
  buffer := intvec.empty(6000)
  file.With(filename) open [f: file.File] {
    file.Lines(f) each [line: []char] {
      str.Split(line, !,) do [num_str: []char] {
        buffer'append(ParseInt64(num_str))
      }
    }
  }
  for (0, 80) do [day: i64] {
    n := buffer.length as i64
    for (0, n) do [i: i64] {
      if (buffer'at(i) == 0) then {
        buffer'append(8)
        @(buffer'ref(i)) = 6
      } else {
        @(buffer'ref(i)) -= 1
      }
    }
  }
  io.Print("Part 1: ", buffer.length, !\n)
}

io.Print("Test:\n")
Solve("inputs/06.test")

io.Print("Full:\n")
Solve("inputs/06.full")