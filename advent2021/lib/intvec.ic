-- ::= import "core.ic"
memory ::= import "memory.ic"

#{export}
intvec ::= struct {
  _data: [*]i64
  #{export}
  length: u64
  _capacity: u64

  (destroy) ::= (self: *intvec) -> () {
    memory.deallocate(self._data)
  }
}

#{export}
empty ::= (capacity: u64) -> intvec {
  buffer := memory.allocate(i64, capacity)
  return intvec.{
    _data = buffer.data
    length = 0
    _capacity = capacity
  }
}

#{export}
make ::= (fill: i64, len: u64) -> intvec {
  buffer := memory.allocate(i64, len)
  for (0, len as i64) do [idx: i64] {
    buffer[idx] = init fill
  }
  return intvec.{
    _data = buffer.data
    length = len
    _capacity = len
  }
}

#{export}
__index__ ::= (self: *intvec, idx: i64) => self._data[idx]

#{export}
ref ::= (self: *intvec, idx: i64) -> *i64 {
  return &self._data[idx]
}

#{export}
as_slice ::= (self: *intvec) -> []i64 {
  return slice(&self._data[0], self.length)
}

#{export}
back ::= (self: *intvec) -> i64 {
  return self._data[self.length - 1]
}

#{export}
pop_back ::= (self: *intvec) -> () {
  self.length -= 1
}

#{export}
append ::= (self: *intvec, val: i64) -> () {
  if (self.length == self._capacity) then {
    self._capacity *= 2
    new_buffer := memory.allocate(i64, self._capacity)
    for (0, self.length as i64) do [idx: i64] {
      new_buffer[idx] = self._data[idx]
    }
    memory.deallocate(self._data)
    self._data = new_buffer.data
  }
  self._data[self.length] = val
  self.length += 1
}

// TODO: use a more efficient implementation here
#{export}
sort ::= (self: *intvec) -> () {
  for (0, self.length as i64) do [idx: i64] {
    for (idx + 1, self.length as i64) do [idx2: i64] {
      if (self._data[idx] > self._data[idx2]) then {
        tmp := self._data[idx]
        self._data[idx] = self._data[idx2]
        self._data[idx2] = tmp
      }
    }
  }
}

foreach_state ::= struct {
  _vec: *intvec
  _idx: i64
}
at_end ::= (self: *foreach_state) => self._idx >= self._vec.length as i64

#{export}
ForEach ::= scope (foreach_state) {
  enter ::= jump [state: *foreach_state] (v: *intvec) {
    state._vec = v
    state._idx = 0
    goto state'at_end(), done(), do(state._vec[state._idx])
  }

  do ::= block {
    before ::= (x: i64) => x
    after ::= jump [state: *foreach_state] () {
      state._idx += 1
    goto state'at_end(), done(), do(state._vec[state._idx])
    }
  }

  exit ::= () -> () {}
}