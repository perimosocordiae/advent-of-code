-- ::= import "core.ic"
io ::= import "io.ic"
str ::= import "string/split.ic"
vec ::= import "lib/intvec.ic"
file ::= import "file.ic"
util ::= import "lib/util.ic"

MoveCostOne ::= (crabs: *vec.intvec, pos: i64) -> i64 {
  cost := 0
  for (0, crabs.length as i64) do [i: i64] {
    cost += util.Abs(pos - crabs'at(i))
  }
  return cost
}

MoveCostTwo ::= (crabs: *vec.intvec, pos: i64) -> i64 {
  cost := 0
  for (0, crabs.length as i64) do [i: i64] {
    delta := util.Abs(pos - crabs'at(i))
    cost += (delta * (delta + 1)) / 2
  }
  return cost
}

FindMinCostOne ::= (crabs: *vec.intvec) -> i64 {
  min_cost := MoveCostOne(crabs, 0)
  pos := 1
  while (true) do {
    cost := MoveCostOne(crabs, pos)
    if (cost < min_cost) then {
      min_cost = cost
    } else if (cost > min_cost) then {
      return min_cost
    }
    pos += 1
  }
  return min_cost
}

FindMinCostTwo ::= (crabs: *vec.intvec) -> i64 {
  min_cost := MoveCostTwo(crabs, 0)
  pos := 1
  while (true) do {
    cost := MoveCostTwo(crabs, pos)
    if (cost < min_cost) then {
      min_cost = cost
    } else if (cost > min_cost) then {
      return min_cost
    }
    pos += 1
  }
  return min_cost
}

Solve ::= (filename: []char) -> () {
  crabs := vec.empty(10)
  file.With(filename) open [f: file.File] {
    file.Lines(f) each [line: []char] {
      str.Split(line, !,) do [num_str: []char] {
        crabs'append(util.ParseInt64(num_str))
      }
    }
  }
  io.Print("Part 1: ", FindMinCostOne(&crabs), !\n)
  io.Print("Part 1: ", FindMinCostTwo(&crabs), !\n)
}

io.Print("Test:\n")
Solve("inputs/07.test")

io.Print("Full:\n")
Solve("inputs/07.full")